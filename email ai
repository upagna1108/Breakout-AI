import streamlit as st
import pandas as pd
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from email.mime.text import MIMEText
import base64
import requests  # For calling the LLM API

# Title
st.title("AI Agent Dashboard")

# File Upload
uploaded_file = st.file_uploader("Upload a CSV file", type=["csv"])

if uploaded_file:
    data = pd.read_csv(uploaded_file)
    st.write("Data Preview:")
    st.write(data.head())

    # Display available columns for placeholder usage
    st.write("Available Columns for Placeholders:")
    st.write(", ".join(f"{{{{{col}}}}}" for col in data.columns))

else:
    st.write("No file uploaded yet.")

# Gmail OAuth Authentication
def authenticate_gmail():
    SCOPES = ['https://www.googleapis.com/auth/gmail.send']
    flow = InstalledAppFlow.from_client_secrets_file('credentials.json', SCOPES)
    creds = flow.run_local_server(port=0)
    return creds

# Send Email Function
def send_email_gmail(creds, subject, body, to_email):
    try:
        service = build('gmail', 'v1', credentials=creds)
        message = MIMEText(body)
        message['to'] = to_email
        message['subject'] = subject
        raw_message = base64.urlsafe_b64encode(message.as_bytes()).decode()
        send_message = service.users().messages().send(userId="me", body={'raw': raw_message}).execute()
        return "Email sent successfully!"
    except Exception as e:
        return f"An error occurred: {e}"

# Function to generate a custom message using the LLM API
def generate_custom_message(prompt_template, row_data):
    # Replace placeholders in the prompt with actual row data
    prompt_filled = prompt_template.format(**row_data)
    
    # Prepare API payload for the chat completion
    payload = {
    "model": "gpt-3.5-turbo",  # Replace with the appropriate model if different
    "messages": [
        {"role": "system", "content": "You are an AI assistant generating personalized email content."},
        {"role": "user", "content": prompt_filled}
    ],
    "temperature": 0.7,
    "max_tokens": 50  # Reduce token limit
    }

    
    headers = {
        "Authorization": "Bearer keyyy
    "Content-Type": "application/json"
    }

    # Make API call to the LLM
    response = requests.post("https://api.groq.com/openai/v1/chat/completions", json=payload, headers=headers)
    
    if response.status_code == 200:
        return response.json().get("choices", [{}])[0].get("message", {}).get("content", "No response from LLM")
    else:
        return f"Error: {response.status_code} - {response.text}"

# Email Input Fields
subject = st.text_input("Enter Email Subject")
body_prompt = st.text_area("Enter Email Body Prompt (use placeholders like {ColumnName})")

# Authenticate and Send Emails
if st.button("Authenticate and Send All Emails"):
    creds = authenticate_gmail()  # Authenticate Gmail once
    for index, row in data.iterrows():
        to_email = row.get('Email', '').strip()  # Ensure the correct column name 'Email' is in your CSV

        # Skip if no email is found for this row
        if not to_email:
            st.write(f"No recipient email found for row {index}, skipping this entry.")
            continue

        # Convert row data to dictionary for easy placeholder replacement
        row_data = row.to_dict()

        # Generate custom message using LLM API based on the user's prompt
        email_body = generate_custom_message(body_prompt, row_data)

        # Send email and display the response
        response = send_email_gmail(creds, subject, email_body, to_email)
        st.write(f"Email to {to_email}: {response}")
