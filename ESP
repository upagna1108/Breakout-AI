import streamlit as st
import pandas as pd
import requests

# Title
st.title("Custom Email Sender with Brevo")

# File Upload
uploaded_file = st.file_uploader("Upload a CSV file", type=["csv"])

if uploaded_file:
    data = pd.read_csv(uploaded_file)
    st.write("Data Preview:")
    st.write(data.head())

    # Display columns to insert as placeholders
    st.write("Available Columns for Placeholders:")
    st.write(", ".join(f"{{{{{col}}}}}" for col in data.columns))

    column = st.selectbox("Select Primary Column for Entity Names", data.columns)
else:
    st.write("No file uploaded yet.")

# Send Email Function using Brevo
def send_email_brevo(api_key, subject, body, to_email):
    url = "https://api.brevo.com/v3/smtp/email"
    payload = {
        "sender": {"name": "Your Name", "email": "your-email@example.com"},  # Replace with your details
        "to": [{"email": to_email}],
        "subject": subject,
        "htmlContent": body
    }
    headers = {
        "accept": "application/json",
        "api-key": api_key,
        "content-type": "application/json"
    }
    response = requests.post(url, json=payload, headers=headers)
    if response.status_code == 201:
        return response.json()['messageId']  # Return the message ID
    else:
        return f"An error occurred: {response.text}"

# Email Input Fields
subject = st.text_input("Enter Email Subject")
body = st.text_area("Enter Email Body (use placeholders like {ColumnName})")
api_key = st.text_input("Enter your Brevo API Key", type="password")

# Real-Time Dashboard
status_placeholder = st.empty()
progress_bar = st.progress(0)

# Authenticate and Send Emails
if st.button("Authenticate and Send All Emails"):
    total_emails = len(data)
    successful_emails = 0
    message_ids = []

    # Create a dataframe to track email statuses
    tracking_data = {
        'Company Name': [],
        'Email': [],
        'Status': [],
        'Delivery Status': [],
        'Opened': []
    }

    for index, row in data.iterrows():
        to_email = row.get('Email', '').strip()

        if not to_email:
            st.write(f"No recipient email found for row {index}, skipping this entry.")
            tracking_data['Company Name'].append(row.get('Company Name', 'N/A'))
            tracking_data['Email'].append(to_email)
            tracking_data['Status'].append('Failed')
            tracking_data['Delivery Status'].append('N/A')
            tracking_data['Opened'].append(False)
            continue

        email_body = body
        for col in data.columns:
            email_body = email_body.replace(f"{{{col}}}", str(row[col]))

        # Send email and store the message ID
        message_id = send_email_brevo(api_key, subject, email_body, to_email)
        message_ids.append(message_id)
        st.write(f"Email to {to_email}: Message ID = {message_id}")

        if "An error occurred" not in message_id:
            successful_emails += 1
            tracking_data['Status'].append('Sent')
            tracking_data['Delivery Status'].append('Delivered')  # Placeholder, update with actual status
            tracking_data['Opened'].append(True)  # Placeholder, update with actual status
        else:
            tracking_data['Status'].append('Failed')
            tracking_data['Delivery Status'].append('N/A')
            tracking_data['Opened'].append(False)

        tracking_data['Company Name'].append(row.get('Company Name', 'N/A'))
        tracking_data['Email'].append(to_email)

        # Update progress bar and status
        progress = (index + 1) / total_emails
        progress_bar.progress(progress)
        status_placeholder.text(f"Sent {successful_emails}/{total_emails} emails")

    status_placeholder.text(f"Finished sending emails: {successful_emails}/{total_emails} successful")

    # Create a DataFrame for tracking data
    df_tracking = pd.DataFrame(tracking_data)
    st.write(df_tracking)
